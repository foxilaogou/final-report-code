function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Apr-2023 20:24:33.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx5 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [104.55;495.15;305.1;45.9;56.1];
x1_step1.gain = [0.00433886538670138;0.00132039347725622;0.00377821856994427;0.00387484258452;0.00499001996007984];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.9323465757977776;0.5921185042168795;-0.17260051217257041;-1.0210529856443631;-2.5074367684893164];
IW1_1 = [0.9844819510829963 -1.0597731236684185 -1.2119127104062386 0.4685132500900715 -1.1824714120711453;-1.7461066142512554 -0.37941832036769041 1.1475087597290698 -0.7195524789977803 0.35484900281708731;-0.00035334646118988233 1.0409723175240744 1.3996498308714014 -1.8240857060724229 -0.19575333792980831;-1.1487792003587507 0.46922738891726096 0.83501501669044542 1.8581437196509951 0.93413312036834895;-0.72165719892921232 -1.077934523286977 -1.0465685820551294 -1.1197523037592978 0.28228054342083886];

% Layer 2
b2 = -0.042993928199733175;
LW2_1 = [0.88452944671460798 1.1116444046152119 -1.4965660686825666 0.76647861213814394 -1.4784346346643333];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00412796697626419;
y1_step1.xoffset = 792;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
